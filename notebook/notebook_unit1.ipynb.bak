{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Sustainable Software Development, block course, March 2021**  \n",
    "*Scientific Software Center, Institute for Scientific Computing, Dr. Inga Ulusoy*\n",
    "\n",
    "# Analysis of the data\n",
    "\n",
    "Imagine you perform a \"measurement\" of some type and obtain \"scientific data\". You know what your data represents, but you have only a vague idea how different features in the data are connected, and what information you can extract from the data.\n",
    "\n",
    "You would start first with going through the data, making sure your data set is complete and that the result is reasonable. Imagine this already happened.\n",
    "\n",
    "In the next step, you would inspect your data more closely and try to identify structures. That is the step that we are focusing on in this unit.\n",
    "\n",
    "In the `data` folder, you will find several data files (`*.t` and `*.dat`). These are data files generated through some \"new approach\" that hasn't been used in your lab before. No previous analysis software exists, and you are going to establish a protocol for this \"new approach\" and \"publish your results\".\n",
    "\n",
    "The data can be grouped into two categories: \n",
    "1. data to be analyzed using statistical methods;\n",
    "2. data to be analyzed using numerical methods.\n",
    "\n",
    "In your hypothetical lab, you are an \"expert\" in one particular \"method\", and your co-worker is an \"expert\" in the other. Combined these two methods will lead to much more impactful results than if only one of you analyzed the data. Now, the task in this course is to be solved collaboratively with your team member working on one of the analysis approaches, and you working on the other. You will both implement functionality into the same piece of \"software\", but do so collaboratively through git.\n",
    "\n",
    "As you do not know yet which analysis is most meaningful for your data, and how to implement it, you will start with a jupyter notebook. You and your team member will work on the same notebook that will be part of a github repository for your project. This is the task for today. Discuss with your team members who will work on the statistical and who on the numerical analysis."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 1\n",
    "\n",
    "Accept the assignment through GitHub classroom."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 2\n",
    "\n",
    "Clone the repository to your local machine."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 3\n",
    "\n",
    "Start working on task 1 for your analysis approach. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 4\n",
    "\n",
    "Create your own branch of the repository and commit your changes to your branch; push to the remote repository."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 5\n",
    "\n",
    "Open a `pull request` so your team member can review your implementation. Likewise, your team member will ask you to review theirs."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 6\n",
    "\n",
    "Merge the changes in your branch into `main`. Resolve conflicts."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 7\n",
    "\n",
    "Repeat working on task; committing and pushing to your previously generated branch or a new branch; open a pull request; merge with main; until you have finished all the tasks in your analysis approach. Delete obsolete branches."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Start of the analysis notebook\n",
    "\n",
    "**Author : Your Name**  \n",
    "*Date : The date you started working on this*  \n",
    "*Affiliation : The entity under whose name you are working on this*  \n",
    "\n",
    "Place the required modules in the top, followed by required constants and global functions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# required modules"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# constants and global functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# reading of the data files"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Statistical analysis\n",
    "\n",
    "Find correlations in the data sets. Analyse the data statistically and plot your results.  \n",
    "\n",
    "Here we would want to do everything with pandas and leave the data in a dataframe. The files that are relevant to you are `expect.t`, `npop.t` and `table.dat`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Task 1: Read in expec.t and plot relevant data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>time</th>\n",
       "      <th>norm</th>\n",
       "      <th>&lt;x&gt;</th>\n",
       "      <th>&lt;y&gt;</th>\n",
       "      <th>&lt;z&gt;</th>\n",
       "      <th>&lt;H&gt;</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-2.196320</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-2.196320</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-2.196320</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-2.196320</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-2.196320</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>9.6</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-2.012171</td>\n",
       "      <td>0.032949</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>9.7</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-1.441347</td>\n",
       "      <td>0.032949</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>9.8</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.982419</td>\n",
       "      <td>0.032949</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>9.9</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.759304</td>\n",
       "      <td>0.032949</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100</th>\n",
       "      <td>10.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.629835</td>\n",
       "      <td>0.032949</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>101 rows Ã— 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     time  norm  <x>  <y>       <z>       <H>\n",
       "0     0.0   1.0  0.0  0.0 -2.196320  0.000000\n",
       "1     0.1   1.0  0.0  0.0 -2.196320  0.000000\n",
       "2     0.2   1.0 -0.0  0.0 -2.196320  0.000000\n",
       "3     0.3   1.0 -0.0  0.0 -2.196320  0.000000\n",
       "4     0.4   1.0 -0.0  0.0 -2.196320  0.000000\n",
       "..    ...   ...  ...  ...       ...       ...\n",
       "96    9.6   1.0  0.0 -0.0 -2.012171  0.032949\n",
       "97    9.7   1.0  0.0  0.0 -1.441347  0.032949\n",
       "98    9.8   1.0  0.0  0.0 -0.982419  0.032949\n",
       "99    9.9   1.0 -0.0  0.0 -0.759304  0.032949\n",
       "100  10.0   1.0 -0.0  0.0 -0.629835  0.032949\n",
       "\n",
       "[101 rows x 6 columns]"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd \n",
    "import matplotlib.pyplot as plt\n",
    "expec_df = pd.read_csv('../data/expec.t', sep='\\s+')\n",
    "expec_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can discard the entries norm, \\<x>, and \\<y> as these are mostly constant."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>time</th>\n",
       "      <th>&lt;z&gt;</th>\n",
       "      <th>&lt;H&gt;</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>-2.196320</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.1</td>\n",
       "      <td>-2.196320</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.2</td>\n",
       "      <td>-2.196320</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.3</td>\n",
       "      <td>-2.196320</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.4</td>\n",
       "      <td>-2.196320</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>9.6</td>\n",
       "      <td>-2.012171</td>\n",
       "      <td>0.032949</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>9.7</td>\n",
       "      <td>-1.441347</td>\n",
       "      <td>0.032949</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>9.8</td>\n",
       "      <td>-0.982419</td>\n",
       "      <td>0.032949</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>9.9</td>\n",
       "      <td>-0.759304</td>\n",
       "      <td>0.032949</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100</th>\n",
       "      <td>10.0</td>\n",
       "      <td>-0.629835</td>\n",
       "      <td>0.032949</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>101 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     time       <z>       <H>\n",
       "0     0.0 -2.196320  0.000000\n",
       "1     0.1 -2.196320  0.000000\n",
       "2     0.2 -2.196320  0.000000\n",
       "3     0.3 -2.196320  0.000000\n",
       "4     0.4 -2.196320  0.000000\n",
       "..    ...       ...       ...\n",
       "96    9.6 -2.012171  0.032949\n",
       "97    9.7 -1.441347  0.032949\n",
       "98    9.8 -0.982419  0.032949\n",
       "99    9.9 -0.759304  0.032949\n",
       "100  10.0 -0.629835  0.032949\n",
       "\n",
       "[101 rows x 3 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "expec_filtered = expec_df.drop(columns=['norm', '<x>','<y>'])\n",
    "expec_filtered\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# eliminate columns based on the variance: if the variance of the values\n",
    "# in a column is below a given threshold, that column is discarded\n",
    "variance_series = expec_filtered.var()\n",
    "variance_series\n",
    "\n",
    "var_cutoff = 1e-25\n",
    "low_variance_columns = variance_series[variance_series < var_cutoff].index.tolist()\n",
    "low_variance_columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>&lt;z&gt;</th>\n",
       "      <th>&lt;H&gt;</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>time</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0.0</th>\n",
       "      <td>-2.196320</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.1</th>\n",
       "      <td>-2.196320</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.2</th>\n",
       "      <td>-2.196320</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.3</th>\n",
       "      <td>-2.196320</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.4</th>\n",
       "      <td>-2.196320</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9.6</th>\n",
       "      <td>-2.012171</td>\n",
       "      <td>0.032949</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9.7</th>\n",
       "      <td>-1.441347</td>\n",
       "      <td>0.032949</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9.8</th>\n",
       "      <td>-0.982419</td>\n",
       "      <td>0.032949</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9.9</th>\n",
       "      <td>-0.759304</td>\n",
       "      <td>0.032949</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10.0</th>\n",
       "      <td>-0.629835</td>\n",
       "      <td>0.032949</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>101 rows Ã— 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           <z>       <H>\n",
       "time                    \n",
       "0.0  -2.196320  0.000000\n",
       "0.1  -2.196320  0.000000\n",
       "0.2  -2.196320  0.000000\n",
       "0.3  -2.196320  0.000000\n",
       "0.4  -2.196320  0.000000\n",
       "...        ...       ...\n",
       "9.6  -2.012171  0.032949\n",
       "9.7  -1.441347  0.032949\n",
       "9.8  -0.982419  0.032949\n",
       "9.9  -0.759304  0.032949\n",
       "10.0 -0.629835  0.032949\n",
       "\n",
       "[101 rows x 2 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "expec_high_var = expec_filtered.drop(columns=low_variance_columns)\n",
    "expec_high_var\n",
    "# set time as index\n",
    "expec_high_var.set_index('time', inplace=True)\n",
    "expec_high_var"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Task 2: Create plots of the relevant data and save as .pdf."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x800 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 640x480 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axes = plt.subplots(2, 1, figsize=(10, 8))\n",
    "\n",
    "axes[0].plot(expec_filtered['time'], expec_filtered['<z>'])\n",
    "axes[0].set_xlabel('Time')\n",
    "axes[0].set_ylabel('<z>')\n",
    "axes[0].grid(True)\n",
    "\n",
    "axes[1].plot(expec_filtered['time'], expec_filtered['<H>'])\n",
    "axes[1].set_xlabel('Time')\n",
    "axes[1].set_ylabel('<H>')\n",
    "axes[1].grid(True)\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('expec_plots.pdf', format='pdf', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "plt.savefig('expec_plots.png', format='png', dpi=300, bbox_inches='tight')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Task 3: Read in file `npop.t` and analyze correlations in the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MO1</th>\n",
       "      <th>MO2</th>\n",
       "      <th>MO3</th>\n",
       "      <th>MO4</th>\n",
       "      <th>MO5</th>\n",
       "      <th>MO6</th>\n",
       "      <th>MO7</th>\n",
       "      <th>MO8</th>\n",
       "      <th>MO9</th>\n",
       "      <th>MO10</th>\n",
       "      <th>...</th>\n",
       "      <th>MO29</th>\n",
       "      <th>MO30</th>\n",
       "      <th>MO31</th>\n",
       "      <th>MO32</th>\n",
       "      <th>MO33</th>\n",
       "      <th>MO34</th>\n",
       "      <th>MO35</th>\n",
       "      <th>MO36</th>\n",
       "      <th>MO37</th>\n",
       "      <th>MO38</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>time</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0.0</th>\n",
       "      <td>0.999974</td>\n",
       "      <td>0.999892</td>\n",
       "      <td>0.976819</td>\n",
       "      <td>0.976330</td>\n",
       "      <td>0.000708</td>\n",
       "      <td>0.005711</td>\n",
       "      <td>0.000158</td>\n",
       "      <td>0.000920</td>\n",
       "      <td>0.000158</td>\n",
       "      <td>0.000920</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000815</td>\n",
       "      <td>0.000514</td>\n",
       "      <td>0.004893</td>\n",
       "      <td>0.001388</td>\n",
       "      <td>0.000469</td>\n",
       "      <td>0.000193</td>\n",
       "      <td>0.000469</td>\n",
       "      <td>0.000193</td>\n",
       "      <td>0.000401</td>\n",
       "      <td>0.000128</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.1</th>\n",
       "      <td>0.999974</td>\n",
       "      <td>0.999892</td>\n",
       "      <td>0.976819</td>\n",
       "      <td>0.976330</td>\n",
       "      <td>0.000708</td>\n",
       "      <td>0.005711</td>\n",
       "      <td>0.000158</td>\n",
       "      <td>0.000920</td>\n",
       "      <td>0.000158</td>\n",
       "      <td>0.000920</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000815</td>\n",
       "      <td>0.000514</td>\n",
       "      <td>0.004893</td>\n",
       "      <td>0.001388</td>\n",
       "      <td>0.000469</td>\n",
       "      <td>0.000193</td>\n",
       "      <td>0.000469</td>\n",
       "      <td>0.000193</td>\n",
       "      <td>0.000401</td>\n",
       "      <td>0.000128</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.2</th>\n",
       "      <td>0.999974</td>\n",
       "      <td>0.999892</td>\n",
       "      <td>0.976819</td>\n",
       "      <td>0.976330</td>\n",
       "      <td>0.000708</td>\n",
       "      <td>0.005711</td>\n",
       "      <td>0.000158</td>\n",
       "      <td>0.000920</td>\n",
       "      <td>0.000158</td>\n",
       "      <td>0.000920</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000815</td>\n",
       "      <td>0.000514</td>\n",
       "      <td>0.004893</td>\n",
       "      <td>0.001388</td>\n",
       "      <td>0.000469</td>\n",
       "      <td>0.000193</td>\n",
       "      <td>0.000469</td>\n",
       "      <td>0.000193</td>\n",
       "      <td>0.000401</td>\n",
       "      <td>0.000128</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.3</th>\n",
       "      <td>0.999974</td>\n",
       "      <td>0.999892</td>\n",
       "      <td>0.976819</td>\n",
       "      <td>0.976330</td>\n",
       "      <td>0.000708</td>\n",
       "      <td>0.005711</td>\n",
       "      <td>0.000158</td>\n",
       "      <td>0.000920</td>\n",
       "      <td>0.000158</td>\n",
       "      <td>0.000920</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000815</td>\n",
       "      <td>0.000514</td>\n",
       "      <td>0.004893</td>\n",
       "      <td>0.001388</td>\n",
       "      <td>0.000469</td>\n",
       "      <td>0.000193</td>\n",
       "      <td>0.000469</td>\n",
       "      <td>0.000193</td>\n",
       "      <td>0.000401</td>\n",
       "      <td>0.000128</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.4</th>\n",
       "      <td>0.999974</td>\n",
       "      <td>0.999892</td>\n",
       "      <td>0.976819</td>\n",
       "      <td>0.976330</td>\n",
       "      <td>0.000708</td>\n",
       "      <td>0.005711</td>\n",
       "      <td>0.000158</td>\n",
       "      <td>0.000920</td>\n",
       "      <td>0.000158</td>\n",
       "      <td>0.000920</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000815</td>\n",
       "      <td>0.000514</td>\n",
       "      <td>0.004893</td>\n",
       "      <td>0.001388</td>\n",
       "      <td>0.000469</td>\n",
       "      <td>0.000193</td>\n",
       "      <td>0.000469</td>\n",
       "      <td>0.000193</td>\n",
       "      <td>0.000401</td>\n",
       "      <td>0.000128</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9.6</th>\n",
       "      <td>0.999979</td>\n",
       "      <td>0.999887</td>\n",
       "      <td>0.958403</td>\n",
       "      <td>0.797274</td>\n",
       "      <td>0.005708</td>\n",
       "      <td>0.148098</td>\n",
       "      <td>0.000343</td>\n",
       "      <td>0.001248</td>\n",
       "      <td>0.000427</td>\n",
       "      <td>0.001540</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000752</td>\n",
       "      <td>0.000335</td>\n",
       "      <td>0.005750</td>\n",
       "      <td>0.000978</td>\n",
       "      <td>0.000295</td>\n",
       "      <td>0.000115</td>\n",
       "      <td>0.000297</td>\n",
       "      <td>0.000115</td>\n",
       "      <td>0.000260</td>\n",
       "      <td>0.000077</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9.7</th>\n",
       "      <td>0.999976</td>\n",
       "      <td>0.999866</td>\n",
       "      <td>0.957587</td>\n",
       "      <td>0.804826</td>\n",
       "      <td>0.004443</td>\n",
       "      <td>0.093095</td>\n",
       "      <td>0.000327</td>\n",
       "      <td>0.001199</td>\n",
       "      <td>0.000456</td>\n",
       "      <td>0.001570</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000787</td>\n",
       "      <td>0.000429</td>\n",
       "      <td>0.005558</td>\n",
       "      <td>0.000985</td>\n",
       "      <td>0.000305</td>\n",
       "      <td>0.000118</td>\n",
       "      <td>0.000305</td>\n",
       "      <td>0.000118</td>\n",
       "      <td>0.000269</td>\n",
       "      <td>0.000078</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9.8</th>\n",
       "      <td>0.999978</td>\n",
       "      <td>0.999874</td>\n",
       "      <td>0.954496</td>\n",
       "      <td>0.794074</td>\n",
       "      <td>0.007291</td>\n",
       "      <td>0.128985</td>\n",
       "      <td>0.000389</td>\n",
       "      <td>0.001289</td>\n",
       "      <td>0.000224</td>\n",
       "      <td>0.001054</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000667</td>\n",
       "      <td>0.000355</td>\n",
       "      <td>0.005969</td>\n",
       "      <td>0.000987</td>\n",
       "      <td>0.000290</td>\n",
       "      <td>0.000113</td>\n",
       "      <td>0.000293</td>\n",
       "      <td>0.000114</td>\n",
       "      <td>0.000252</td>\n",
       "      <td>0.000077</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9.9</th>\n",
       "      <td>0.999980</td>\n",
       "      <td>0.999877</td>\n",
       "      <td>0.950438</td>\n",
       "      <td>0.783889</td>\n",
       "      <td>0.006105</td>\n",
       "      <td>0.144308</td>\n",
       "      <td>0.000694</td>\n",
       "      <td>0.002031</td>\n",
       "      <td>0.000303</td>\n",
       "      <td>0.001292</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000569</td>\n",
       "      <td>0.000283</td>\n",
       "      <td>0.005676</td>\n",
       "      <td>0.000920</td>\n",
       "      <td>0.000239</td>\n",
       "      <td>0.000086</td>\n",
       "      <td>0.000243</td>\n",
       "      <td>0.000086</td>\n",
       "      <td>0.000202</td>\n",
       "      <td>0.000060</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10.0</th>\n",
       "      <td>0.999980</td>\n",
       "      <td>0.999882</td>\n",
       "      <td>0.950052</td>\n",
       "      <td>0.783028</td>\n",
       "      <td>0.006797</td>\n",
       "      <td>0.154622</td>\n",
       "      <td>0.000479</td>\n",
       "      <td>0.001478</td>\n",
       "      <td>0.000320</td>\n",
       "      <td>0.001316</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000668</td>\n",
       "      <td>0.000253</td>\n",
       "      <td>0.005907</td>\n",
       "      <td>0.000928</td>\n",
       "      <td>0.000227</td>\n",
       "      <td>0.000084</td>\n",
       "      <td>0.000229</td>\n",
       "      <td>0.000084</td>\n",
       "      <td>0.000201</td>\n",
       "      <td>0.000056</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>101 rows Ã— 38 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           MO1       MO2       MO3       MO4       MO5       MO6       MO7  \\\n",
       "time                                                                         \n",
       "0.0   0.999974  0.999892  0.976819  0.976330  0.000708  0.005711  0.000158   \n",
       "0.1   0.999974  0.999892  0.976819  0.976330  0.000708  0.005711  0.000158   \n",
       "0.2   0.999974  0.999892  0.976819  0.976330  0.000708  0.005711  0.000158   \n",
       "0.3   0.999974  0.999892  0.976819  0.976330  0.000708  0.005711  0.000158   \n",
       "0.4   0.999974  0.999892  0.976819  0.976330  0.000708  0.005711  0.000158   \n",
       "...        ...       ...       ...       ...       ...       ...       ...   \n",
       "9.6   0.999979  0.999887  0.958403  0.797274  0.005708  0.148098  0.000343   \n",
       "9.7   0.999976  0.999866  0.957587  0.804826  0.004443  0.093095  0.000327   \n",
       "9.8   0.999978  0.999874  0.954496  0.794074  0.007291  0.128985  0.000389   \n",
       "9.9   0.999980  0.999877  0.950438  0.783889  0.006105  0.144308  0.000694   \n",
       "10.0  0.999980  0.999882  0.950052  0.783028  0.006797  0.154622  0.000479   \n",
       "\n",
       "           MO8       MO9      MO10  ...      MO29      MO30      MO31  \\\n",
       "time                                ...                                 \n",
       "0.0   0.000920  0.000158  0.000920  ...  0.000815  0.000514  0.004893   \n",
       "0.1   0.000920  0.000158  0.000920  ...  0.000815  0.000514  0.004893   \n",
       "0.2   0.000920  0.000158  0.000920  ...  0.000815  0.000514  0.004893   \n",
       "0.3   0.000920  0.000158  0.000920  ...  0.000815  0.000514  0.004893   \n",
       "0.4   0.000920  0.000158  0.000920  ...  0.000815  0.000514  0.004893   \n",
       "...        ...       ...       ...  ...       ...       ...       ...   \n",
       "9.6   0.001248  0.000427  0.001540  ...  0.000752  0.000335  0.005750   \n",
       "9.7   0.001199  0.000456  0.001570  ...  0.000787  0.000429  0.005558   \n",
       "9.8   0.001289  0.000224  0.001054  ...  0.000667  0.000355  0.005969   \n",
       "9.9   0.002031  0.000303  0.001292  ...  0.000569  0.000283  0.005676   \n",
       "10.0  0.001478  0.000320  0.001316  ...  0.000668  0.000253  0.005907   \n",
       "\n",
       "          MO32      MO33      MO34      MO35      MO36      MO37      MO38  \n",
       "time                                                                        \n",
       "0.0   0.001388  0.000469  0.000193  0.000469  0.000193  0.000401  0.000128  \n",
       "0.1   0.001388  0.000469  0.000193  0.000469  0.000193  0.000401  0.000128  \n",
       "0.2   0.001388  0.000469  0.000193  0.000469  0.000193  0.000401  0.000128  \n",
       "0.3   0.001388  0.000469  0.000193  0.000469  0.000193  0.000401  0.000128  \n",
       "0.4   0.001388  0.000469  0.000193  0.000469  0.000193  0.000401  0.000128  \n",
       "...        ...       ...       ...       ...       ...       ...       ...  \n",
       "9.6   0.000978  0.000295  0.000115  0.000297  0.000115  0.000260  0.000077  \n",
       "9.7   0.000985  0.000305  0.000118  0.000305  0.000118  0.000269  0.000078  \n",
       "9.8   0.000987  0.000290  0.000113  0.000293  0.000114  0.000252  0.000077  \n",
       "9.9   0.000920  0.000239  0.000086  0.000243  0.000086  0.000202  0.000060  \n",
       "10.0  0.000928  0.000227  0.000084  0.000229  0.000084  0.000201  0.000056  \n",
       "\n",
       "[101 rows x 38 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# read in npop.t\n",
    "npop_df = pd.read_csv('../data/npop.t', sep='\\s+')\n",
    "npop_df\n",
    "# set time as index\n",
    "npop_df.set_index('time', inplace=True)\n",
    "npop_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MO3</th>\n",
       "      <th>MO4</th>\n",
       "      <th>MO5</th>\n",
       "      <th>MO6</th>\n",
       "      <th>MO11</th>\n",
       "      <th>MO12</th>\n",
       "      <th>MO13</th>\n",
       "      <th>MO14</th>\n",
       "      <th>MO19</th>\n",
       "      <th>MO20</th>\n",
       "      <th>MO28</th>\n",
       "      <th>MO31</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>time</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0.0</th>\n",
       "      <td>0.976819</td>\n",
       "      <td>0.976330</td>\n",
       "      <td>0.000708</td>\n",
       "      <td>0.005711</td>\n",
       "      <td>0.004568</td>\n",
       "      <td>0.006659</td>\n",
       "      <td>0.000114</td>\n",
       "      <td>0.000107</td>\n",
       "      <td>0.006705</td>\n",
       "      <td>0.004241</td>\n",
       "      <td>0.000005</td>\n",
       "      <td>0.004893</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.1</th>\n",
       "      <td>0.976819</td>\n",
       "      <td>0.976330</td>\n",
       "      <td>0.000708</td>\n",
       "      <td>0.005711</td>\n",
       "      <td>0.004568</td>\n",
       "      <td>0.006659</td>\n",
       "      <td>0.000114</td>\n",
       "      <td>0.000107</td>\n",
       "      <td>0.006705</td>\n",
       "      <td>0.004241</td>\n",
       "      <td>0.000005</td>\n",
       "      <td>0.004893</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.2</th>\n",
       "      <td>0.976819</td>\n",
       "      <td>0.976330</td>\n",
       "      <td>0.000708</td>\n",
       "      <td>0.005711</td>\n",
       "      <td>0.004568</td>\n",
       "      <td>0.006659</td>\n",
       "      <td>0.000114</td>\n",
       "      <td>0.000107</td>\n",
       "      <td>0.006705</td>\n",
       "      <td>0.004241</td>\n",
       "      <td>0.000005</td>\n",
       "      <td>0.004893</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.3</th>\n",
       "      <td>0.976819</td>\n",
       "      <td>0.976330</td>\n",
       "      <td>0.000708</td>\n",
       "      <td>0.005711</td>\n",
       "      <td>0.004568</td>\n",
       "      <td>0.006659</td>\n",
       "      <td>0.000114</td>\n",
       "      <td>0.000107</td>\n",
       "      <td>0.006705</td>\n",
       "      <td>0.004241</td>\n",
       "      <td>0.000005</td>\n",
       "      <td>0.004893</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.4</th>\n",
       "      <td>0.976819</td>\n",
       "      <td>0.976330</td>\n",
       "      <td>0.000708</td>\n",
       "      <td>0.005711</td>\n",
       "      <td>0.004568</td>\n",
       "      <td>0.006659</td>\n",
       "      <td>0.000114</td>\n",
       "      <td>0.000107</td>\n",
       "      <td>0.006705</td>\n",
       "      <td>0.004241</td>\n",
       "      <td>0.000005</td>\n",
       "      <td>0.004893</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9.6</th>\n",
       "      <td>0.958403</td>\n",
       "      <td>0.797274</td>\n",
       "      <td>0.005708</td>\n",
       "      <td>0.148098</td>\n",
       "      <td>0.012219</td>\n",
       "      <td>0.027792</td>\n",
       "      <td>0.001413</td>\n",
       "      <td>0.014994</td>\n",
       "      <td>0.010414</td>\n",
       "      <td>0.005386</td>\n",
       "      <td>0.000064</td>\n",
       "      <td>0.005750</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9.7</th>\n",
       "      <td>0.957587</td>\n",
       "      <td>0.804826</td>\n",
       "      <td>0.004443</td>\n",
       "      <td>0.093095</td>\n",
       "      <td>0.012243</td>\n",
       "      <td>0.030818</td>\n",
       "      <td>0.004150</td>\n",
       "      <td>0.059735</td>\n",
       "      <td>0.009937</td>\n",
       "      <td>0.005040</td>\n",
       "      <td>0.000054</td>\n",
       "      <td>0.005558</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9.8</th>\n",
       "      <td>0.954496</td>\n",
       "      <td>0.794074</td>\n",
       "      <td>0.007291</td>\n",
       "      <td>0.128985</td>\n",
       "      <td>0.012491</td>\n",
       "      <td>0.020341</td>\n",
       "      <td>0.003529</td>\n",
       "      <td>0.046814</td>\n",
       "      <td>0.010823</td>\n",
       "      <td>0.003912</td>\n",
       "      <td>0.000063</td>\n",
       "      <td>0.005969</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9.9</th>\n",
       "      <td>0.950438</td>\n",
       "      <td>0.783889</td>\n",
       "      <td>0.006105</td>\n",
       "      <td>0.144308</td>\n",
       "      <td>0.017117</td>\n",
       "      <td>0.032180</td>\n",
       "      <td>0.001950</td>\n",
       "      <td>0.027780</td>\n",
       "      <td>0.012268</td>\n",
       "      <td>0.004956</td>\n",
       "      <td>0.000042</td>\n",
       "      <td>0.005676</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10.0</th>\n",
       "      <td>0.950052</td>\n",
       "      <td>0.783028</td>\n",
       "      <td>0.006797</td>\n",
       "      <td>0.154622</td>\n",
       "      <td>0.018999</td>\n",
       "      <td>0.032437</td>\n",
       "      <td>0.002238</td>\n",
       "      <td>0.020387</td>\n",
       "      <td>0.010563</td>\n",
       "      <td>0.003764</td>\n",
       "      <td>0.000036</td>\n",
       "      <td>0.005907</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>101 rows Ã— 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           MO3       MO4       MO5       MO6      MO11      MO12      MO13  \\\n",
       "time                                                                         \n",
       "0.0   0.976819  0.976330  0.000708  0.005711  0.004568  0.006659  0.000114   \n",
       "0.1   0.976819  0.976330  0.000708  0.005711  0.004568  0.006659  0.000114   \n",
       "0.2   0.976819  0.976330  0.000708  0.005711  0.004568  0.006659  0.000114   \n",
       "0.3   0.976819  0.976330  0.000708  0.005711  0.004568  0.006659  0.000114   \n",
       "0.4   0.976819  0.976330  0.000708  0.005711  0.004568  0.006659  0.000114   \n",
       "...        ...       ...       ...       ...       ...       ...       ...   \n",
       "9.6   0.958403  0.797274  0.005708  0.148098  0.012219  0.027792  0.001413   \n",
       "9.7   0.957587  0.804826  0.004443  0.093095  0.012243  0.030818  0.004150   \n",
       "9.8   0.954496  0.794074  0.007291  0.128985  0.012491  0.020341  0.003529   \n",
       "9.9   0.950438  0.783889  0.006105  0.144308  0.017117  0.032180  0.001950   \n",
       "10.0  0.950052  0.783028  0.006797  0.154622  0.018999  0.032437  0.002238   \n",
       "\n",
       "          MO14      MO19      MO20      MO28      MO31  \n",
       "time                                                    \n",
       "0.0   0.000107  0.006705  0.004241  0.000005  0.004893  \n",
       "0.1   0.000107  0.006705  0.004241  0.000005  0.004893  \n",
       "0.2   0.000107  0.006705  0.004241  0.000005  0.004893  \n",
       "0.3   0.000107  0.006705  0.004241  0.000005  0.004893  \n",
       "0.4   0.000107  0.006705  0.004241  0.000005  0.004893  \n",
       "...        ...       ...       ...       ...       ...  \n",
       "9.6   0.014994  0.010414  0.005386  0.000064  0.005750  \n",
       "9.7   0.059735  0.009937  0.005040  0.000054  0.005558  \n",
       "9.8   0.046814  0.010823  0.003912  0.000063  0.005969  \n",
       "9.9   0.027780  0.012268  0.004956  0.000042  0.005676  \n",
       "10.0  0.020387  0.010563  0.003764  0.000036  0.005907  \n",
       "\n",
       "[101 rows x 12 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# discard all columns with variance below a set threshold - we can consider them as constant\n",
    "variance_series_npop = npop_df.var()\n",
    "variance_series_npop\n",
    "var_cutoff_npop = 1e-7\n",
    "low_variance_columns_npop = variance_series_npop[variance_series_npop < var_cutoff_npop].index.tolist()\n",
    "npop_high_var = npop_df.drop(columns=low_variance_columns_npop)\n",
    "npop_high_var"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Plot the remaining columns. Seaborn prefers \"long format\" (one column for all measurement values, one column to indicate the type) as input, whereas the cvs is in \"wide format\" (one column per measurement type)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>variable</th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>time</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0.0</th>\n",
       "      <td>MO3</td>\n",
       "      <td>0.976819</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.1</th>\n",
       "      <td>MO3</td>\n",
       "      <td>0.976819</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.2</th>\n",
       "      <td>MO3</td>\n",
       "      <td>0.976819</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.3</th>\n",
       "      <td>MO3</td>\n",
       "      <td>0.976819</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.4</th>\n",
       "      <td>MO3</td>\n",
       "      <td>0.976819</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9.6</th>\n",
       "      <td>MO31</td>\n",
       "      <td>0.005750</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9.7</th>\n",
       "      <td>MO31</td>\n",
       "      <td>0.005558</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9.8</th>\n",
       "      <td>MO31</td>\n",
       "      <td>0.005969</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9.9</th>\n",
       "      <td>MO31</td>\n",
       "      <td>0.005676</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10.0</th>\n",
       "      <td>MO31</td>\n",
       "      <td>0.005907</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1212 rows Ã— 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     variable     value\n",
       "time                   \n",
       "0.0       MO3  0.976819\n",
       "0.1       MO3  0.976819\n",
       "0.2       MO3  0.976819\n",
       "0.3       MO3  0.976819\n",
       "0.4       MO3  0.976819\n",
       "...       ...       ...\n",
       "9.6      MO31  0.005750\n",
       "9.7      MO31  0.005558\n",
       "9.8      MO31  0.005969\n",
       "9.9      MO31  0.005676\n",
       "10.0     MO31  0.005907\n",
       "\n",
       "[1212 rows x 2 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# transform to sparse long matrix, include time index\n",
    "\n",
    "import seaborn as sns\n",
    "npop_long = npop_high_var.melt(ignore_index=False)\n",
    "npop_long\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Quantify the pairwise correlation in the data\n",
    "\n",
    "- negative correlation: y values decrease for increasing x - large values of one feature correspond to small values of the other feature\n",
    "- weak or no correlation: no trend observable, association between two features is hardly observable\n",
    "- positive correlation: y values increase for decreasing x - small values of one feature correspond to small values of the other feature\n",
    "\n",
    "Remember that correlation does not indicate causation - the reason that two features are associated can lie in their dependence on same factors.\n",
    "\n",
    "Correlate the value pairs using Pearson's $r$. Pearson's $r$ is a measure of the linear relationship between features:\n",
    "\n",
    "$r = \\frac{\\sum_i(x_i âˆ’ \\bar{x})(y_i âˆ’ \\bar{y})}{\\sqrt{\\sum_i(x_i âˆ’ \\bar{x})^2 \\sum_i(y_i âˆ’ \\bar{y})^2}}$\n",
    "\n",
    "Here, $\\bar{x}$ and $\\bar{y}$ indicate mean values. $i$ runs over the whole data set. For a positive correlation, $r$ is positive, and negative for a negative correlation, with minimum and maximum values of -1 and 1, indicating a perfectly linear relationship. Weakly or not correlated features are characterized by $r$-values close to 0.\n",
    "\n",
    "Other measures of correlation that can be used are Spearman's rank (value pairs follow monotonic function) or Kendall's $\\tau$ (measures ordinal association), but they do not apply here. You can also define measures yourself."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MO3</th>\n",
       "      <th>MO4</th>\n",
       "      <th>MO5</th>\n",
       "      <th>MO6</th>\n",
       "      <th>MO11</th>\n",
       "      <th>MO12</th>\n",
       "      <th>MO13</th>\n",
       "      <th>MO14</th>\n",
       "      <th>MO19</th>\n",
       "      <th>MO20</th>\n",
       "      <th>MO28</th>\n",
       "      <th>MO31</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>MO3</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.926317</td>\n",
       "      <td>-0.939877</td>\n",
       "      <td>-0.907659</td>\n",
       "      <td>-0.966070</td>\n",
       "      <td>-0.818545</td>\n",
       "      <td>-0.693899</td>\n",
       "      <td>-0.590497</td>\n",
       "      <td>-0.922622</td>\n",
       "      <td>0.072169</td>\n",
       "      <td>0.028125</td>\n",
       "      <td>-0.954677</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MO4</th>\n",
       "      <td>0.926317</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.902028</td>\n",
       "      <td>-0.964051</td>\n",
       "      <td>-0.844402</td>\n",
       "      <td>-0.782851</td>\n",
       "      <td>-0.827863</td>\n",
       "      <td>-0.726726</td>\n",
       "      <td>-0.822057</td>\n",
       "      <td>-0.033661</td>\n",
       "      <td>-0.013774</td>\n",
       "      <td>-0.917615</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MO5</th>\n",
       "      <td>-0.939877</td>\n",
       "      <td>-0.902028</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.948240</td>\n",
       "      <td>0.880870</td>\n",
       "      <td>0.661812</td>\n",
       "      <td>0.626793</td>\n",
       "      <td>0.474882</td>\n",
       "      <td>0.821516</td>\n",
       "      <td>-0.146431</td>\n",
       "      <td>-0.109305</td>\n",
       "      <td>0.960655</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MO6</th>\n",
       "      <td>-0.907659</td>\n",
       "      <td>-0.964051</td>\n",
       "      <td>0.948240</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.841446</td>\n",
       "      <td>0.699677</td>\n",
       "      <td>0.688966</td>\n",
       "      <td>0.538846</td>\n",
       "      <td>0.776518</td>\n",
       "      <td>-0.057147</td>\n",
       "      <td>-0.034388</td>\n",
       "      <td>0.924548</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MO11</th>\n",
       "      <td>-0.966070</td>\n",
       "      <td>-0.844402</td>\n",
       "      <td>0.880870</td>\n",
       "      <td>0.841446</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.855583</td>\n",
       "      <td>0.561679</td>\n",
       "      <td>0.447701</td>\n",
       "      <td>0.846299</td>\n",
       "      <td>-0.160839</td>\n",
       "      <td>-0.060132</td>\n",
       "      <td>0.893978</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MO12</th>\n",
       "      <td>-0.818545</td>\n",
       "      <td>-0.782851</td>\n",
       "      <td>0.661812</td>\n",
       "      <td>0.699677</td>\n",
       "      <td>0.855583</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.576447</td>\n",
       "      <td>0.514489</td>\n",
       "      <td>0.721802</td>\n",
       "      <td>0.025860</td>\n",
       "      <td>-0.031353</td>\n",
       "      <td>0.701058</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MO13</th>\n",
       "      <td>-0.693899</td>\n",
       "      <td>-0.827863</td>\n",
       "      <td>0.626793</td>\n",
       "      <td>0.688966</td>\n",
       "      <td>0.561679</td>\n",
       "      <td>0.576447</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.941180</td>\n",
       "      <td>0.615849</td>\n",
       "      <td>0.128776</td>\n",
       "      <td>0.093789</td>\n",
       "      <td>0.699397</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MO14</th>\n",
       "      <td>-0.590497</td>\n",
       "      <td>-0.726726</td>\n",
       "      <td>0.474882</td>\n",
       "      <td>0.538846</td>\n",
       "      <td>0.447701</td>\n",
       "      <td>0.514489</td>\n",
       "      <td>0.941180</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.592609</td>\n",
       "      <td>0.193889</td>\n",
       "      <td>0.114510</td>\n",
       "      <td>0.581761</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MO19</th>\n",
       "      <td>-0.922622</td>\n",
       "      <td>-0.822057</td>\n",
       "      <td>0.821516</td>\n",
       "      <td>0.776518</td>\n",
       "      <td>0.846299</td>\n",
       "      <td>0.721802</td>\n",
       "      <td>0.615849</td>\n",
       "      <td>0.592609</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.100944</td>\n",
       "      <td>0.093893</td>\n",
       "      <td>0.860423</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MO20</th>\n",
       "      <td>0.072169</td>\n",
       "      <td>-0.033661</td>\n",
       "      <td>-0.146431</td>\n",
       "      <td>-0.057147</td>\n",
       "      <td>-0.160839</td>\n",
       "      <td>0.025860</td>\n",
       "      <td>0.128776</td>\n",
       "      <td>0.193889</td>\n",
       "      <td>0.100944</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.449512</td>\n",
       "      <td>-0.151806</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MO28</th>\n",
       "      <td>0.028125</td>\n",
       "      <td>-0.013774</td>\n",
       "      <td>-0.109305</td>\n",
       "      <td>-0.034388</td>\n",
       "      <td>-0.060132</td>\n",
       "      <td>-0.031353</td>\n",
       "      <td>0.093789</td>\n",
       "      <td>0.114510</td>\n",
       "      <td>0.093893</td>\n",
       "      <td>0.449512</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.075776</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MO31</th>\n",
       "      <td>-0.954677</td>\n",
       "      <td>-0.917615</td>\n",
       "      <td>0.960655</td>\n",
       "      <td>0.924548</td>\n",
       "      <td>0.893978</td>\n",
       "      <td>0.701058</td>\n",
       "      <td>0.699397</td>\n",
       "      <td>0.581761</td>\n",
       "      <td>0.860423</td>\n",
       "      <td>-0.151806</td>\n",
       "      <td>-0.075776</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           MO3       MO4       MO5       MO6      MO11      MO12      MO13  \\\n",
       "MO3   1.000000  0.926317 -0.939877 -0.907659 -0.966070 -0.818545 -0.693899   \n",
       "MO4   0.926317  1.000000 -0.902028 -0.964051 -0.844402 -0.782851 -0.827863   \n",
       "MO5  -0.939877 -0.902028  1.000000  0.948240  0.880870  0.661812  0.626793   \n",
       "MO6  -0.907659 -0.964051  0.948240  1.000000  0.841446  0.699677  0.688966   \n",
       "MO11 -0.966070 -0.844402  0.880870  0.841446  1.000000  0.855583  0.561679   \n",
       "MO12 -0.818545 -0.782851  0.661812  0.699677  0.855583  1.000000  0.576447   \n",
       "MO13 -0.693899 -0.827863  0.626793  0.688966  0.561679  0.576447  1.000000   \n",
       "MO14 -0.590497 -0.726726  0.474882  0.538846  0.447701  0.514489  0.941180   \n",
       "MO19 -0.922622 -0.822057  0.821516  0.776518  0.846299  0.721802  0.615849   \n",
       "MO20  0.072169 -0.033661 -0.146431 -0.057147 -0.160839  0.025860  0.128776   \n",
       "MO28  0.028125 -0.013774 -0.109305 -0.034388 -0.060132 -0.031353  0.093789   \n",
       "MO31 -0.954677 -0.917615  0.960655  0.924548  0.893978  0.701058  0.699397   \n",
       "\n",
       "          MO14      MO19      MO20      MO28      MO31  \n",
       "MO3  -0.590497 -0.922622  0.072169  0.028125 -0.954677  \n",
       "MO4  -0.726726 -0.822057 -0.033661 -0.013774 -0.917615  \n",
       "MO5   0.474882  0.821516 -0.146431 -0.109305  0.960655  \n",
       "MO6   0.538846  0.776518 -0.057147 -0.034388  0.924548  \n",
       "MO11  0.447701  0.846299 -0.160839 -0.060132  0.893978  \n",
       "MO12  0.514489  0.721802  0.025860 -0.031353  0.701058  \n",
       "MO13  0.941180  0.615849  0.128776  0.093789  0.699397  \n",
       "MO14  1.000000  0.592609  0.193889  0.114510  0.581761  \n",
       "MO19  0.592609  1.000000  0.100944  0.093893  0.860423  \n",
       "MO20  0.193889  0.100944  1.000000  0.449512 -0.151806  \n",
       "MO28  0.114510  0.093893  0.449512  1.000000 -0.075776  \n",
       "MO31  0.581761  0.860423 -0.151806 -0.075776  1.000000  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# print the correlation matrix using pearsons  r \n",
    "corr_matrix_npop_high_var = npop_high_var.corr(method='pearson')\n",
    "corr_matrix_npop_high_var"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The diagonal values tell us that each value is perfectly correlated with itself. We are not interested in the diagonal values and also not in the correlation with time. We also need to get rid of redundant entries. Finally, we need to find the value pairs that exhibit the highest linear correlation. We still want to know if it is positive or negative correlation, so we cannot get rid of the sign."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>variable1</th>\n",
       "      <th>variable2</th>\n",
       "      <th>correlation</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>MO3</td>\n",
       "      <td>MO4</td>\n",
       "      <td>0.926317</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>MO3</td>\n",
       "      <td>MO5</td>\n",
       "      <td>-0.939877</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>MO3</td>\n",
       "      <td>MO6</td>\n",
       "      <td>-0.907659</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>MO3</td>\n",
       "      <td>MO11</td>\n",
       "      <td>-0.966070</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>MO3</td>\n",
       "      <td>MO12</td>\n",
       "      <td>-0.818545</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61</th>\n",
       "      <td>MO19</td>\n",
       "      <td>MO28</td>\n",
       "      <td>0.093893</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62</th>\n",
       "      <td>MO19</td>\n",
       "      <td>MO31</td>\n",
       "      <td>0.860423</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>MO20</td>\n",
       "      <td>MO28</td>\n",
       "      <td>0.449512</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>64</th>\n",
       "      <td>MO20</td>\n",
       "      <td>MO31</td>\n",
       "      <td>-0.151806</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>65</th>\n",
       "      <td>MO28</td>\n",
       "      <td>MO31</td>\n",
       "      <td>-0.075776</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>66 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   variable1 variable2  correlation\n",
       "0        MO3       MO4     0.926317\n",
       "1        MO3       MO5    -0.939877\n",
       "2        MO3       MO6    -0.907659\n",
       "3        MO3      MO11    -0.966070\n",
       "4        MO3      MO12    -0.818545\n",
       "..       ...       ...          ...\n",
       "61      MO19      MO28     0.093893\n",
       "62      MO19      MO31     0.860423\n",
       "63      MO20      MO28     0.449512\n",
       "64      MO20      MO31    -0.151806\n",
       "65      MO28      MO31    -0.075776\n",
       "\n",
       "[66 rows x 3 columns]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# get rid of time column, lower triangular and diagonal entries of the correlation matrix\n",
    "# discard lower triangular and diagonal entries of the correlation matrix \n",
    "\n",
    "# make the lower triangular of corr matrix zeors \n",
    "import numpy as np\n",
    "corr_matrix_npop_high_var.values[np.tril_indices_from(corr_matrix_npop_high_var, k=0)] = 0\n",
    "corr_matrix_npop_high_var\n",
    "# get the upper triangular matrix as a long dataframe\n",
    "upper_tri_indices = np.triu_indices_from(corr_matrix_npop_high_var, k=1)\n",
    "corr_upper_tri_df = pd.DataFrame({\n",
    "    'variable1': corr_matrix_npop_high_var.columns[upper_tri_indices[0]],\n",
    "    'variable2': corr_matrix_npop_high_var.columns[upper_tri_indices[1]],\n",
    "    'correlation': corr_matrix_npop_high_var.values[upper_tri_indices]\n",
    "})\n",
    "corr_upper_tri_df\n",
    "\n",
    "\n",
    "# sort the remaing values according to their absolute value, but keep the sign"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   variable1 variable2  correlation\n",
      "3        MO3      MO11    -0.966070\n",
      "12       MO4       MO6    -0.964051\n",
      "29       MO5      MO31     0.960655\n",
      "10       MO3      MO31    -0.954677\n",
      "21       MO5       MO6     0.948240\n",
      "51      MO13      MO14     0.941180\n",
      "1        MO3       MO5    -0.939877\n",
      "0        MO3       MO4     0.926317\n",
      "37       MO6      MO31     0.924548\n",
      "7        MO3      MO19    -0.922622\n"
     ]
    }
   ],
   "source": [
    "# print value pairs with highest correaltion\n",
    "corr_upper_tri_df = corr_upper_tri_df.sort_values(by='correlation', key=lambda x: x.abs(), ascending=False)\n",
    "N_TOP = 10\n",
    "print(corr_upper_tri_df.head(N_TOP))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that the entries in the left column are not repeated if they do not change from the row above (so the fourth feature pair is MO3 and MO6)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Task 4: Print the resulting data to a file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>variable1</th>\n",
       "      <th>variable2</th>\n",
       "      <th>correlation</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>MO3</td>\n",
       "      <td>MO11</td>\n",
       "      <td>-0.966070</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>MO4</td>\n",
       "      <td>MO6</td>\n",
       "      <td>-0.964051</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>MO5</td>\n",
       "      <td>MO31</td>\n",
       "      <td>0.960655</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>MO3</td>\n",
       "      <td>MO31</td>\n",
       "      <td>-0.954677</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>MO5</td>\n",
       "      <td>MO6</td>\n",
       "      <td>0.948240</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>MO4</td>\n",
       "      <td>MO20</td>\n",
       "      <td>-0.033661</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>MO12</td>\n",
       "      <td>MO28</td>\n",
       "      <td>-0.031353</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>MO3</td>\n",
       "      <td>MO28</td>\n",
       "      <td>0.028125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>MO12</td>\n",
       "      <td>MO20</td>\n",
       "      <td>0.025860</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>MO4</td>\n",
       "      <td>MO28</td>\n",
       "      <td>-0.013774</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>66 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   variable1 variable2  correlation\n",
       "3        MO3      MO11    -0.966070\n",
       "12       MO4       MO6    -0.964051\n",
       "29       MO5      MO31     0.960655\n",
       "10       MO3      MO31    -0.954677\n",
       "21       MO5       MO6     0.948240\n",
       "..       ...       ...          ...\n",
       "18       MO4      MO20    -0.033661\n",
       "49      MO12      MO28    -0.031353\n",
       "9        MO3      MO28     0.028125\n",
       "48      MO12      MO20     0.025860\n",
       "19       MO4      MO28    -0.013774\n",
       "\n",
       "[66 rows x 3 columns]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# write to file\n",
    "\n",
    "corr_upper_tri_df.head(N_TOP).to_csv('npop_top_correlations.csv', index=False)\n",
    "corr_upper_tri_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Task 5: Calculate the Euclidean distance (L2 norm) for the vectors in `table.dat`\n",
    "\n",
    "\n",
    "The Euclidean distance measures the distance between to objects that are not points:\n",
    "\n",
    "$d(p,q) = \\sqrt{\\left(p-q\\right)^2}$\n",
    "\n",
    "In this case, consider each of the columns in table.dat as a vector in Euclidean space, where column $r(x)$ and column $v(x)$ denote a pair of vectors that should be compared, as well as $r(y)$ and $v(y)$, and r(z) and v(z).\n",
    "\n",
    "(Background: These are dipole moment components in different gauges, the length and velocity gauge.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>i</td>\n",
       "      <td>j</td>\n",
       "      <td>r(x)</td>\n",
       "      <td>v(x)</td>\n",
       "      <td>r(y)</td>\n",
       "      <td>v(y)</td>\n",
       "      <td>r(z)</td>\n",
       "      <td>v(z)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0.00000000</td>\n",
       "      <td>0.00000000</td>\n",
       "      <td>0.00000000</td>\n",
       "      <td>0.00000000</td>\n",
       "      <td>0.99773700</td>\n",
       "      <td>1.21031839</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>-1.17153200</td>\n",
       "      <td>-1.10613174</td>\n",
       "      <td>0.94096200</td>\n",
       "      <td>0.88843253</td>\n",
       "      <td>0.00000000</td>\n",
       "      <td>0.00000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>-0.94096200</td>\n",
       "      <td>-0.88843253</td>\n",
       "      <td>-1.17153200</td>\n",
       "      <td>-1.10613174</td>\n",
       "      <td>0.00000000</td>\n",
       "      <td>0.00000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>0.00000000</td>\n",
       "      <td>-0.00000000</td>\n",
       "      <td>0.00000000</td>\n",
       "      <td>0.00000000</td>\n",
       "      <td>-0.32274500</td>\n",
       "      <td>-0.53483237</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4946</th>\n",
       "      <td>97</td>\n",
       "      <td>99</td>\n",
       "      <td>-0.15782800</td>\n",
       "      <td>1.91926964</td>\n",
       "      <td>-0.24420200</td>\n",
       "      <td>2.96959225</td>\n",
       "      <td>0.00000000</td>\n",
       "      <td>-0.00000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4947</th>\n",
       "      <td>97</td>\n",
       "      <td>100</td>\n",
       "      <td>-0.00000000</td>\n",
       "      <td>0.00000000</td>\n",
       "      <td>0.00000000</td>\n",
       "      <td>-0.00000000</td>\n",
       "      <td>-0.00000000</td>\n",
       "      <td>-0.00000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4948</th>\n",
       "      <td>98</td>\n",
       "      <td>99</td>\n",
       "      <td>0.00000000</td>\n",
       "      <td>0.00000000</td>\n",
       "      <td>0.00000000</td>\n",
       "      <td>0.00000000</td>\n",
       "      <td>-0.00000000</td>\n",
       "      <td>-0.00000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4949</th>\n",
       "      <td>98</td>\n",
       "      <td>100</td>\n",
       "      <td>0.00000000</td>\n",
       "      <td>0.00000000</td>\n",
       "      <td>-0.00000000</td>\n",
       "      <td>0.00000000</td>\n",
       "      <td>0.00000000</td>\n",
       "      <td>-0.00000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4950</th>\n",
       "      <td>99</td>\n",
       "      <td>100</td>\n",
       "      <td>-0.00000000</td>\n",
       "      <td>0.00000000</td>\n",
       "      <td>-0.00000000</td>\n",
       "      <td>0.00000000</td>\n",
       "      <td>0.00000000</td>\n",
       "      <td>-0.00000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4951 rows Ã— 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       0    1            2            3            4            5  \\\n",
       "0      i    j         r(x)         v(x)         r(y)         v(y)   \n",
       "1      1    2   0.00000000   0.00000000   0.00000000   0.00000000   \n",
       "2      1    3  -1.17153200  -1.10613174   0.94096200   0.88843253   \n",
       "3      1    4  -0.94096200  -0.88843253  -1.17153200  -1.10613174   \n",
       "4      1    5   0.00000000  -0.00000000   0.00000000   0.00000000   \n",
       "...   ..  ...          ...          ...          ...          ...   \n",
       "4946  97   99  -0.15782800   1.91926964  -0.24420200   2.96959225   \n",
       "4947  97  100  -0.00000000   0.00000000   0.00000000  -0.00000000   \n",
       "4948  98   99   0.00000000   0.00000000   0.00000000   0.00000000   \n",
       "4949  98  100   0.00000000   0.00000000  -0.00000000   0.00000000   \n",
       "4950  99  100  -0.00000000   0.00000000  -0.00000000   0.00000000   \n",
       "\n",
       "                6            7  \n",
       "0            r(z)         v(z)  \n",
       "1      0.99773700   1.21031839  \n",
       "2      0.00000000   0.00000000  \n",
       "3      0.00000000   0.00000000  \n",
       "4     -0.32274500  -0.53483237  \n",
       "...           ...          ...  \n",
       "4946   0.00000000  -0.00000000  \n",
       "4947  -0.00000000  -0.00000000  \n",
       "4948  -0.00000000  -0.00000000  \n",
       "4949   0.00000000  -0.00000000  \n",
       "4950   0.00000000  -0.00000000  \n",
       "\n",
       "[4951 rows x 8 columns]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# read in table.dat - I suggest reading it as a numpy array\n",
    "table_df = pd.read_csv('../data/table.dat', sep='\\s+', header=None)\n",
    "\n",
    "# replace the NaNs by zero\n",
    "table_df.fillna(0, inplace=True)\n",
    "table_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now calculate how different the vectors in column 2 are from column 3, column 4 from column 5, and column 6 from column 7."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'scipy'",
     "output_type": "error",
     "traceback": [
      "\u001b[31m---------------------------------------------------------------------------\u001b[39m",
      "\u001b[31mModuleNotFoundError\u001b[39m                       Traceback (most recent call last)",
      "\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[24]\u001b[39m\u001b[32m, line 2\u001b[39m\n\u001b[32m      1\u001b[39m \u001b[38;5;66;03m# calculate the Euclidean distance between column 2 and coiumn 3\u001b[39;00m\n\u001b[32m----> \u001b[39m\u001b[32m2\u001b[39m \u001b[38;5;28;01mfrom\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mscipy\u001b[39;00m\u001b[34;01m.\u001b[39;00m\u001b[34;01mspatial\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mimport\u001b[39;00m distance\n\u001b[32m      3\u001b[39m euclidean_distance = distance.euclidean(table_df[\u001b[32m2\u001b[39m], table_df[\u001b[32m3\u001b[39m])\n\u001b[32m      4\u001b[39m euclidean_distance\n",
      "\u001b[31mModuleNotFoundError\u001b[39m: No module named 'scipy'"
     ]
    }
   ],
   "source": [
    "# calculate the Euclidean distance between column 2 and coiumn 3\n",
    "lsfrom scipy.spatial import distance\n",
    "euclidean_distance = distance.euclidean(table_df[2], table_df[3])\n",
    "euclidean_distance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# plot the result and save to a .pdf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# print the result to a file"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Numerical analysis\n",
    "\n",
    "Analyze the data using autocorrelation functions and discrete Fourier transforms. Plot your results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# define some global functions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Task 1: Read in `efield.t` and Fourier-transform relevant columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# read and plot efield.t"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here we are interested in column 2 since the others are constant."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# discard the columns with variance below threshold - these are considered constant"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# discrete Fourier transform of the remaining column: You only need the real frequencies"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Task 2: Generate a plot of your results to be saved as pdf."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# plot your results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Task 3: Calculate the autocorrelation function from nstate_i.t\n",
    "The autocorrelation function measures how correlated subsequent vectors are with an initial vector; ie. \n",
    "\n",
    "$\\Psi_{corr} = \\langle \\Psi(t=0) | \\Psi(t) \\rangle = \\int_0^{tfin} \\Psi(0)^* \\Psi(t) dt$\n",
    "\n",
    "Since we are in a numerical representation, the integral can be replaced with a sum; and the given vectors are already normalized."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# read in as numpy array"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# store the time column (column 0) in a vector and drop from array"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# correct the data representation: this is in fact a complex matrix\n",
    "# the real part of each matrix column is contained in numpy array column 0, 2, 4, 6, ...\n",
    "# the imaginary part of each matrix column is contained in numpy array column 1, 3, 5, 7, ...\n",
    "# convert the array that was read as dtype=float into a dtype=complex array"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# for the autocorrelation function, we want the overlap between the first vector at time 0 and all\n",
    "# subsequent vectors at later times - the sum of the product of initial and subsequent vectors for each time step"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Task 4: Generate a plot of your results to be saved as pdf."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# plot the autocorrelation function - real, imaginary and absolute part"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Task 5: Discrete Fourier transform of the autocorrelation function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# discrete Fourier-transform the autocorrelation function - now we need all frequency components,\n",
    "# also the negative ones"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Task 6: Generate a plot of your results to be saved as pdf."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# plot the power spectrum (abs**2)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "ssd-2025",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
